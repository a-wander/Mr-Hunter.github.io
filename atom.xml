<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hunter&#39; home</title>
  
  <subtitle>人生在勤，不索何获！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mr-hunter.github.io/"/>
  <updated>2018-05-23T05:35:32.317Z</updated>
  <id>https://mr-hunter.github.io/</id>
  
  <author>
    <name>Hunter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【C语言】经典小游戏-扫雷</title>
    <link href="https://mr-hunter.github.io/2018/05/22/201855223/"/>
    <id>https://mr-hunter.github.io/2018/05/22/201855223/</id>
    <published>2018-05-22T05:27:47.000Z</published>
    <updated>2018-05-23T05:35:32.317Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>扫雷，是一个Windows平台下一个经典的小游戏，今有兴趣玩了几把后，就利用所学二维数组的相关知识模拟实现了一个“扫雷游戏”。由于学识浅薄，界面有点简陋，尽请谅解！<br><a id="more"></a></p></blockquote><h1 id="项目思路"><a href="#项目思路" class="headerlink" title="项目思路:"></a>项目思路:</h1><ul><li>首先想一想扫雷游戏在Windows平台下是如何实现的。</li></ul><ul><li>其次通过观察游戏，我们可以想到需要用两个二维数组来实现扫雷的功能。</li></ul><ul><li>游戏刚开始，需要需要显示棋盘，用“*”遮盖雷的坐标，所以要有一个填充棋盘的函数。</li><li>通过rand()函数，随机生成雷的坐标，埋雷的函数。</li><li>每次扫过后，都要显示新的棋盘，显示棋盘的函数。</li><li>如果要想第一次踩不到雷的，需要把该坐标下得雷移动到其他不是雷的坐标，并且点击不是雷，还要满足一点击一片的效果。</li><li>最后需要一个函数判断是否扫雷成功。</li></ul><h1 id="项目展示："><a href="#项目展示：" class="headerlink" title="项目展示："></a>项目展示：</h1><p><img src="/img/5231.png" alt="图片加载">  </p><p><img src="/img/5232.png" alt="图片加载"><br><strong>是不是很有意思？当然重中之重的是：</strong></p><blockquote><p>要注意需要用二维数组来打印两个棋盘，假如我们要打印10X10的棋盘，那我们的二维数组元素也要为10X10个吗？，不能，因为我们在设计算法时需要统计坐标周围8个方位雷的个数，假如要统计边界坐标周围雷的个数，那么就会有数组越界的问题，那我们就要在10X10的边界多上一圈元素，也就要定义12X12的数组元素，这些元素我们不要打印出来，心里有数就行。</p></blockquote><h1 id="项目源码："><a href="#项目源码：" class="headerlink" title="项目源码："></a>项目源码：</h1><h2 id="game-h"><a href="#game-h" class="headerlink" title="game.h:"></a>game.h:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*********************************************************************************************</span></span><br><span class="line"><span class="comment">*                     项目名称：扫雷游戏                                                       *</span></span><br><span class="line"><span class="comment">*             编译环境：Vs 2013                                                *</span></span><br><span class="line"><span class="comment">*                     创建日期：2018.4.18                                                      *</span></span><br><span class="line"><span class="comment">*                     项目编辑：Mr.Yao                                                         *  </span></span><br><span class="line"><span class="comment">***********************************************************************************************/</span>  </span><br><span class="line"> <span class="comment">//知识点：  </span></span><br><span class="line"><span class="comment">//1.数组  </span></span><br><span class="line"><span class="comment">//2.函数  </span></span><br><span class="line"><span class="comment">//3.循环  </span></span><br><span class="line"><span class="comment">//4.扩展内容： 递归 (内存换取时间)  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __GAME_H_  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __GAME_H_  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> opp  </span><br><span class="line">&#123;  </span><br><span class="line">    EXIT,  </span><br><span class="line">    PLAY  </span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EASY 10  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HARD 30  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROW 10  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COL 10  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ROWS (ROW+2)  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> COLS (COL+2)  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitMap</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> row,<span class="keyword">int</span> col, <span class="keyword">char</span> <span class="built_in">set</span>)</span></span>; <span class="comment">//创建初始化棋盘  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMap</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span></span>;  <span class="comment">//打印棋盘  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetMy</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> count)</span></span>; <span class="comment">//布雷  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SweepMap</span><span class="params">(<span class="keyword">char</span> my_map[ROWS][COLS], <span class="keyword">char</span> player_map[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> cow, <span class="keyword">int</span> sum)</span></span>; <span class="comment">//扫雷  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveLei</span><span class="params">(<span class="keyword">char</span> my_map[ROWS][COLS], <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>; <span class="comment">//若第一次扫到雷，则移动雷的位置  </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetCount</span><span class="params">(<span class="keyword">char</span> my_map[ROWS][COLS], <span class="keyword">char</span> player_map[ROWS][COLS], <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;<span class="comment">//统计雷数  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="game-c"><a href="#game-c" class="headerlink" title="game.c:"></a>game.c:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"game.h"</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitMap</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">char</span> <span class="built_in">set</span>)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">memset</span>(arr, <span class="built_in">set</span>, col*row*<span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]));  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintMap</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"   "</span>);  </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i&lt;=row ; i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%3d"</span>, i);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt;=row; i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"---"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= row; i++)  </span><br><span class="line">        &#123;                                  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%2d|"</span>, i);  </span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= col ; j++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%3c"</span>, arr[i][j]);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SetMy</span><span class="params">(<span class="keyword">char</span> arr[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> sum)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> count = sum;  </span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span> (count)  </span><br><span class="line">    &#123;  </span><br><span class="line">        x = rand() % row + <span class="number">1</span>;  </span><br><span class="line">        y = rand() % col + <span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (arr[x][y] == <span class="string">'0'</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            arr[x][y] = <span class="string">'1'</span>;  </span><br><span class="line">            count--;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SweepMap</span><span class="params">(<span class="keyword">char</span> my_map[ROWS][COLS],<span class="keyword">char</span> player_map[ROWS][COLS], <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> sum)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">int</span> win = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (win &lt; (row * col - sum))  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请输入你扫雷坐标:&gt;"</span>);  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);  </span><br><span class="line">        temp++;  </span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= row&amp;&amp;y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= col)  </span><br><span class="line">        &#123;  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> ((my_map[x][y] == <span class="string">'1'</span>) &amp;&amp; (temp == <span class="number">1</span>))  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="comment">//保证玩家第一次不死  </span></span><br><span class="line">                MoveLei(my_map, x, y);  </span><br><span class="line">                <span class="comment">//对周围的雷数进行遍历  </span></span><br><span class="line">                GetCount(my_map, player_map, x, y);  </span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (my_map[x][y] == <span class="string">'1'</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n恭喜你，壮烈牺牲\n"</span>);  </span><br><span class="line">                PrintMap(my_map, ROW, COL);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                GetCount(my_map, player_map, x, y);  </span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"\n"</span>);  </span><br><span class="line">                win++;  </span><br><span class="line">            &#125;  </span><br><span class="line">            PrintMap(player_map, ROW, COL);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"坐标输入有误\n"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(win == (row * col - sum))  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"恭喜你，排完了\n"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//若输入的坐标无雷，则要遍历周围，统计雷数    </span></span><br><span class="line"><span class="comment">//若周围无雷，则递归遍历，统计周围雷数    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetCount</span><span class="params">(<span class="keyword">char</span> my_map[ROWS][COLS], <span class="keyword">char</span> player_map[ROWS][COLS], <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((my_map[x][y] == <span class="string">'0'</span>))  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (my_map[x - <span class="number">1</span>][y - <span class="number">1</span>] == <span class="string">'1'</span>)  </span><br><span class="line">            count++;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (my_map[x - <span class="number">1</span>][y] == <span class="string">'1'</span>)  </span><br><span class="line">            count++;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (my_map[x - <span class="number">1</span>][y + <span class="number">1</span>] == <span class="string">'1'</span>)  </span><br><span class="line">            count++;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (my_map[x][y - <span class="number">1</span>] == <span class="string">'1'</span>)  </span><br><span class="line">            count++;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (my_map[x][y + <span class="number">1</span>] == <span class="string">'1'</span>)  </span><br><span class="line">            count++;  </span><br><span class="line">        <span class="keyword">if</span> (my_map[x + <span class="number">1</span>][y - <span class="number">1</span>] == <span class="string">'1'</span>)  </span><br><span class="line">            count++;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (my_map[x + <span class="number">1</span>][y] == <span class="string">'1'</span>)  </span><br><span class="line">            count++;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (my_map[x + <span class="number">1</span>][y + <span class="number">1</span>] == <span class="string">'1'</span>)  </span><br><span class="line">            count++;  </span><br><span class="line"></span><br><span class="line">        player_map[x][y] = (count + <span class="string">'0'</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (player_map[x][y] == <span class="string">'0'</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (player_map[x - <span class="number">1</span>][y - <span class="number">1</span>] == <span class="string">'*'</span>)  </span><br><span class="line">            GetCount(my_map, player_map, x - <span class="number">1</span>, y - <span class="number">1</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (player_map[x - <span class="number">1</span>][y] == <span class="string">'*'</span>)  </span><br><span class="line">            GetCount(my_map, player_map, x - <span class="number">1</span>, y);  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (player_map[x - <span class="number">1</span>][y + <span class="number">1</span>] == <span class="string">'*'</span>)  </span><br><span class="line">            GetCount(my_map, player_map, x - <span class="number">1</span>, y + <span class="number">1</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (player_map[x][y - <span class="number">1</span>] == <span class="string">'*'</span>)  </span><br><span class="line">            GetCount(my_map, player_map, x, y - <span class="number">1</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (player_map[x][y + <span class="number">1</span>] == <span class="string">'*'</span>)  </span><br><span class="line">            GetCount(my_map, player_map, x, y + <span class="number">1</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (player_map[x + <span class="number">1</span>][y - <span class="number">1</span>] == <span class="string">'*'</span>)  </span><br><span class="line">            GetCount(my_map, player_map, x + <span class="number">1</span>, y - <span class="number">1</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (player_map[x + <span class="number">1</span>][y] == <span class="string">'*'</span>)  </span><br><span class="line">            GetCount(my_map, player_map, x + <span class="number">1</span>, y);  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (player_map[x + <span class="number">1</span>][y + <span class="number">1</span>] == <span class="string">'*'</span>)  </span><br><span class="line">            GetCount(my_map, player_map, x + <span class="number">1</span>, y + <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//为提高游戏体验，设置玩家第一次无论如何都不会被炸死    </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MoveLei</span><span class="params">(<span class="keyword">char</span> my_map[ROWS][COLS], <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">do</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        my_map[x][y] = <span class="string">'0'</span>;  </span><br><span class="line">        <span class="keyword">while</span> (ret)  </span><br><span class="line">        &#123;  </span><br><span class="line">            x = rand() % ROW + <span class="number">1</span>;  </span><br><span class="line">            y = rand() % COL + <span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">if</span> (my_map[x][y] == <span class="string">'0'</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                my_map[x][y] = <span class="string">'1'</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            ret--;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">while</span> (ret);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="test-c"><a href="#test-c" class="headerlink" title="test.c"></a>test.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"game.h"</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GotoXY</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="comment">//设定输出位置  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    COORD c;  </span><br><span class="line">    c.X = x - <span class="number">1</span>;  </span><br><span class="line">    c.Y = y - <span class="number">1</span>;  </span><br><span class="line">    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), c);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">meau</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    GotoXY(<span class="number">10</span>, <span class="number">5</span>); <span class="built_in">printf</span>(<span class="string">"开始游戏\n         Let's Go!"</span>);  </span><br><span class="line">    Sleep(<span class="number">1500</span>);  </span><br><span class="line">    system(<span class="string">"cls"</span>);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"****    《扫雷》    ****\n"</span>);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"************************\n"</span>);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*******  1.play  *******\n"</span>);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*******  0.exit  *******\n"</span>);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"************************\n"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">game</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> input = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">char</span> my_map[ROWS][COLS];  </span><br><span class="line">    <span class="keyword">char</span> player_map[ROWS][COLS];  </span><br><span class="line"></span><br><span class="line">    InitMap(my_map,ROWS,COLS,<span class="string">'0'</span>);  </span><br><span class="line">    InitMap(player_map, ROWS, COLS, <span class="string">'*'</span>);  </span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"**** 1.Easy 0.Hard *****\n"</span>);  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);  </span><br><span class="line">    <span class="keyword">switch</span> (input)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">case</span> PLAY:  </span><br><span class="line">            sum = EASY;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> EXIT:  </span><br><span class="line">            sum = HARD;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">default</span>:  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"输入有误\n"</span>);  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n这个棋盘有%d个雷。\n"</span>, sum);  </span><br><span class="line">    SetMy(my_map,ROW,COL,sum);  </span><br><span class="line"></span><br><span class="line">    PrintMap(player_map, ROW, COL);  </span><br><span class="line">    <span class="comment">//PrintMap(my_map, ROW, COL);  </span></span><br><span class="line">    SweepMap(my_map,player_map ,ROW, COL, sum);  </span><br><span class="line">    system(<span class="string">"pause"</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;      </span><br><span class="line">    <span class="keyword">int</span> input = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">do</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        meau();  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"请选择:&gt;"</span>);  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);  </span><br><span class="line">        <span class="keyword">switch</span> (input)  </span><br><span class="line">        &#123;  </span><br><span class="line">        <span class="keyword">case</span> PLAY:  </span><br><span class="line">            game();  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">case</span> EXIT:  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        <span class="keyword">default</span>:  </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"输出有误\n"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">while</span> (input);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));  </span><br><span class="line">    test();  </span><br><span class="line">    system(<span class="string">"pause"</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote><p>简单利用C语言做了一个小游戏，如有不正之处，欢迎双击评论！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;扫雷，是一个Windows平台下一个经典的小游戏，今有兴趣玩了几把后，就利用所学二维数组的相关知识模拟实现了一个“扫雷游戏”。由于学识浅薄，界面有点简陋，尽请谅解！&lt;br&gt;
    
    </summary>
    
      <category term="项目实战" scheme="https://mr-hunter.github.io/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="扫雷" scheme="https://mr-hunter.github.io/tags/%E6%89%AB%E9%9B%B7/"/>
    
  </entry>
  
  <entry>
    <title>【Git命令】大全</title>
    <link href="https://mr-hunter.github.io/2018/05/20/20180522/"/>
    <id>https://mr-hunter.github.io/2018/05/20/20180522/</id>
    <published>2018-05-20T05:27:47.000Z</published>
    <updated>2018-05-22T09:39:03.487Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>经过搜集、整理，现得到以下Git相关知识，相互学习，相互促进。</p><ul><li>上传日期：2018.5.22  </li><li>整理员：Hunter<a id="more"></a>  </li></ul></blockquote><h1 id="git命令学习笔记"><a href="#git命令学习笔记" class="headerlink" title="git命令学习笔记"></a>git命令学习笔记</h1><h2 id="●配置name和email"><a href="#●配置name和email" class="headerlink" title="●配置name和email"></a>●配置name和email</h2><p>$ git config –global user.name “your name”</p><p>$ git config –global user.email “your <a href="mailto:email@example.com" target="_blank" rel="noopener">email@example.com</a>“</p><p>//–global是全局参数，表示这个账户上所以的Git仓库都使用这个配置</p><h2 id="●配置别名"><a href="#●配置别名" class="headerlink" title="●配置别名"></a>●配置别名</h2><p>$ git config –global alias.st status</p><h2 id="●各种状态显示不同颜色"><a href="#●各种状态显示不同颜色" class="headerlink" title="●各种状态显示不同颜色"></a>●各种状态显示不同颜色</h2><p>$ git config –global color.ui true</p><h2 id="●创建并成为让Git管理的仓库"><a href="#●创建并成为让Git管理的仓库" class="headerlink" title="●创建并成为让Git管理的仓库"></a>●创建并成为让Git管理的仓库</h2><p>$ mkdir &lt;文件名&gt;</p><p>$ cd &lt;文件名&gt;</p><p>$ git init//初始化一个仓库</p><p>$ ls -ah//此命令用于看见隐藏的.git</p><h2 id="●将文件添加到Git的仓库里"><a href="#●将文件添加到Git的仓库里" class="headerlink" title="●将文件添加到Git的仓库里"></a>●将文件添加到Git的仓库里</h2><p>$ git add &lt;文件名&gt;</p><p>//第一步，把文件放到暂存区</p><p>$ git commit -m”本次提交的说明”</p><p>//把暂存区的所有内容提交到当前分支</p><h2 id="●查看工作区当前状态"><a href="#●查看工作区当前状态" class="headerlink" title="●查看工作区当前状态"></a>●查看工作区当前状态</h2><p>$ git status</p><h2 id="●查看修改内容"><a href="#●查看修改内容" class="headerlink" title="●查看修改内容"></a>●查看修改内容</h2><p>$ git diff</p><p>补充：查看工作区和版本库最新版本的区别</p><p>$ git diff HEAD – 文件名</p><h2 id="●回退版本"><a href="#●回退版本" class="headerlink" title="●回退版本"></a>●回退版本</h2><p>$ git reset –hard HEAD^</p><p>//回退上一个版本</p><p>$ git reset –hard HEAD^^</p><p>//回退上上个版本</p><p>$ git reset –hard HEAD~100</p><p>//回退上100个版本</p><p>$ git reset –hard commit_id</p><p>//在历史版本里任意穿梭</p><h2 id="●查看历史"><a href="#●查看历史" class="headerlink" title="●查看历史"></a>●查看历史</h2><p>$ git log//查看提交历史</p><p>$ git log –pretty=oneline</p><p>//查看简单的提交历史</p><p>$ git reflog//查看命令历史</p><h2 id="●丢弃工作区的修改"><a href="#●丢弃工作区的修改" class="headerlink" title="●丢弃工作区的修改"></a>●丢弃工作区的修改</h2><p>$ git checkout – 文件名</p><p>//在没有添加到暂存区内</p><p>$ git reset HEAD 文件名</p><p>$ git checkout – 文件名</p><p>//添加到暂存区内</p><h2 id="●删除文件"><a href="#●删除文件" class="headerlink" title="●删除文件"></a>●删除文件</h2><p>$ rm 文件名</p><p>$ git rm 文件名</p><p>//确实要删除这个文件</p><p>$ git checkout – 文件名</p><p>//误删</p><p>补充：强制删除未被合并的分支</p><p>$ git branch -D 分支名</p><h2 id="●生成ssh秘钥"><a href="#●生成ssh秘钥" class="headerlink" title="●生成ssh秘钥"></a>●生成ssh秘钥</h2><p>$ ssh-keygen -t rsa -C”<a href="mailto:youremail@example.com" target="_blank" rel="noopener">youremail@example.com</a>“</p><h2 id="●关联远程库"><a href="#●关联远程库" class="headerlink" title="●关联远程库"></a>●关联远程库</h2><p>$ git remote add origin <a href="mailto:git@githup.com" target="_blank" rel="noopener">git@githup.com</a>:&lt;账户名&gt;/&lt;仓库名&gt;.git</p><h2 id="●推送本地内容到远程库"><a href="#●推送本地内容到远程库" class="headerlink" title="●推送本地内容到远程库"></a>●推送本地内容到远程库</h2><p>$ git push -u origin master</p><p>//第一次推送需要加 -u参数</p><p>$ git push origin master</p><p>//以后操作不用 -u参数</p><h2 id="●克隆仓库"><a href="#●克隆仓库" class="headerlink" title="●克隆仓库"></a>●克隆仓库</h2><p>$ git clone <a href="mailto:git@githup.com" target="_blank" rel="noopener">git@githup.com</a>:&lt;账户名&gt;/&lt;仓库名&gt;.git</p><h2 id="●关于分支的命令"><a href="#●关于分支的命令" class="headerlink" title="●关于分支的命令"></a>●关于分支的命令</h2><p>$ git branch 分支名</p><p>//创建一个新的分支</p><p>$ git checkout 分支名</p><p>//切换分支</p><p>$ git checkout -b 分支名</p><p>//创建并切换分支</p><p>$ git branch</p><p>//查看当前分支</p><p>$ git merge 分支名</p><p>//合并此分支到当前分支(Fast forward模式)</p><p>$ git merge –no-ff -m”说明文字” 分支名（禁用Fast forward模式）</p><p>$ git branch -d 分支名</p><h2 id="●查看分支合并情况"><a href="#●查看分支合并情况" class="headerlink" title="●查看分支合并情况"></a>●查看分支合并情况</h2><p>$ git log –graph=oneline –abbrev-commit</p><h2 id="●储存工作现场"><a href="#●储存工作现场" class="headerlink" title="●储存工作现场"></a>●储存工作现场</h2><p>$ git stash<br>//储存工作现场</p><p>$ git stash</p><p>//储存工作现场的列表</p><p>$ git stash apply</p><p>//恢复工作现场，stash内容不删除</p><p>$ git stash drop</p><p>//删除stash的内容</p><p>$ git stash pop</p><p>//恢复工作现场的同时删除stash内容</p><p>$ git stash apply stash@{0}</p><p>//恢复指定stash</p><h2 id="●查看远程库信息"><a href="#●查看远程库信息" class="headerlink" title="●查看远程库信息"></a>●查看远程库信息</h2><p>$ git remote</p><p>$ git remote -v</p><p>//查看更详细的信息</p><h2 id="●推送指定分支"><a href="#●推送指定分支" class="headerlink" title="●推送指定分支"></a>●推送指定分支</h2><p>$ git push origin 分支名</p><h2 id="●从远程库抓取最新的提交"><a href="#●从远程库抓取最新的提交" class="headerlink" title="●从远程库抓取最新的提交"></a>●从远程库抓取最新的提交</h2><p>$ git pull</p><h2 id="●在本地创建远程分支对应分支"><a href="#●在本地创建远程分支对应分支" class="headerlink" title="●在本地创建远程分支对应分支"></a>●在本地创建远程分支对应分支</h2><p>$ git checkout -b 分支名 origin/分支名</p><h2 id="●建立本地分支和远程分支的关联"><a href="#●建立本地分支和远程分支的关联" class="headerlink" title="●建立本地分支和远程分支的关联"></a>●建立本地分支和远程分支的关联</h2><p>$ git checkout -set-upstream 分支名 origin/分支名</p><h2 id="●关于标签的命令"><a href="#●关于标签的命令" class="headerlink" title="●关于标签的命令"></a>●关于标签的命令</h2><p>$ git tag 标签名</p><p>//打一个新的标签</p><p>$ git tag</p><p>//查看所有标签</p><p>$ git tag 标签名 commit_id</p><p>//给任意提交过的版本打标签</p><p>$ git show 标签名</p><p>//查看标签信息</p><p>$ git tag -a 标签名 -m”说明文字” commit_id</p><p>//创建带有说明的标签 -a指定标签名 -m指定说明文字</p><p>$ git push origin 标签名</p><p>//推送指定标签</p><p>$ git push origin –tags</p><p>//一次性推送所有标签到远程库</p><p>$ git tag -d 标签名</p><p>//删除指定标签</p><p>$ git push origin:refs/tags/标签名</p><p>//删除远程库的标签</p><p>git push origin –delete HEAD</p><p>//删除分支 HEAD</p><p>$ sudo rm test</p><p>$ git add -u</p><p>$ git commit -m “delete test”</p><p>$ git push</p><p>//删除服务器文件</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;经过搜集、整理，现得到以下Git相关知识，相互学习，相互促进。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上传日期：2018.5.22  &lt;/li&gt;
&lt;li&gt;整理员：Hunter
    
    </summary>
    
      <category term="其他" scheme="https://mr-hunter.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="git" scheme="https://mr-hunter.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>字符串左右旋转问题</title>
    <link href="https://mr-hunter.github.io/2018/05/20/20180520/"/>
    <id>https://mr-hunter.github.io/2018/05/20/20180520/</id>
    <published>2018-05-20T05:27:47.000Z</published>
    <updated>2018-05-22T09:39:05.480Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote><p>实现一个函数，可以左旋字符串中的k个字符。 AABCD左旋一个字符得到ABCDA AABCD左旋两个字符得到BCDAA<br><a id="more"></a>  </p></blockquote><h2 id="方法一：【暴力移位法】"><a href="#方法一：【暴力移位法】" class="headerlink" title="方法一：【暴力移位法】"></a>方法一：【暴力移位法】</h2><p>算法思想：用移的步数作为while循环条件(每移1位完了减1)，1位1位的移动，即只需要一个空的变量来存移出去的字符，而这时变量i已经到了数组最后的空位置，此时把先前移出去的字符再补回来即可<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">left_move</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> k)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    assert(str);  </span><br><span class="line">    <span class="keyword">char</span> temp = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);  </span><br><span class="line">    k = k%len;  </span><br><span class="line">    <span class="keyword">while</span> (k--)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">char</span> *cur = str;  </span><br><span class="line">        temp = *cur;  </span><br><span class="line">        <span class="keyword">while</span> (*(cur + <span class="number">1</span>) != <span class="string">'\0'</span>)  </span><br><span class="line">        &#123;  </span><br><span class="line">            *cur = *(cur + <span class="number">1</span>);  </span><br><span class="line">            cur++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        *cur = temp;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">char</span> arr[] = <span class="string">"abcdef"</span>;  </span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);  </span><br><span class="line">    left_move(arr, k);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, arr);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="方法二：【三步翻转法】"><a href="#方法二：【三步翻转法】" class="headerlink" title="方法二：【三步翻转法】"></a>方法二：【三步翻转法】</h2><p>算法思想：以移动的步数为界限，左边字符串整体逆置，右边字符串整体逆置，再整个字符串整体逆置，即需要调用3次整体逆置字符串函数，要注意各个逆置区间的定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;assert.h&gt;    </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span> *left, <span class="keyword">char</span>*right)</span><span class="comment">//逆序    </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    assert(left&amp;&amp;right);  </span><br><span class="line">    <span class="keyword">while</span> (left &lt; right)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">char</span> tmp;  </span><br><span class="line">        tmp = *left;  </span><br><span class="line">        *left = *right;  </span><br><span class="line">        *right = tmp;  </span><br><span class="line">        left++,  </span><br><span class="line">        right--;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse_left</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> k)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;  </span><br><span class="line">    assert(str);  </span><br><span class="line">    len = <span class="built_in">strlen</span>(str);  </span><br><span class="line">    k = k%len;  </span><br><span class="line">    reverse(str, (str + k - <span class="number">1</span>));<span class="comment">//要旋转的k个字符逆序    </span></span><br><span class="line">    reverse((str + k), (str + len - <span class="number">1</span>));<span class="comment">//之后的字符逆序    </span></span><br><span class="line">    reverse(str, (str + len - <span class="number">1</span>));<span class="comment">//所有的字符逆序    </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">"abcdefgh"</span>;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);  </span><br><span class="line">    reverse_left(str, k);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, str);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法三：【穷举法】"><a href="#方法三：【穷举法】" class="headerlink" title="方法三：【穷举法】"></a>方法三：【穷举法】</h2><p>算法思想：(相当于穷举法)申请一个是原来2倍+1(算上\0)的数组空间，将原来的字符串复制一遍存在这个空间里，然后从原来的首元素加上移动的步数开始输出len个长度的字符串，完成左旋效果(先后用到strcpy strcat strncpy函数)</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>(1)变量定义一定要放在表达式前面，否则乱报错；<br>(2)用malloc函数申请完空间记得释放，头文件&lt;stdlib.h&gt;<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1  </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;    </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;   </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;  </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse_string</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> k)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);  </span><br><span class="line">    <span class="keyword">char</span> *tmp = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">2</span> * len + <span class="number">1</span>); <span class="comment">//申请2倍的原数组空间   </span></span><br><span class="line">    assert(str);  </span><br><span class="line">    <span class="built_in">strcpy</span>(tmp, str);  <span class="comment">//把原来的字符串拷贝到这个大空间里    </span></span><br><span class="line">    <span class="built_in">strcat</span>(tmp, str);  <span class="comment">//把原来的字符串再拼接到后面(复制2遍)    </span></span><br><span class="line">    <span class="built_in">strncpy</span>(str, tmp + k, len);  <span class="comment">//从要移动的位数后一位起，获取原来长度的字符串，达到左旋效果    </span></span><br><span class="line">    <span class="built_in">free</span>(tmp);  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">char</span> arr[] = <span class="string">"abcdef"</span>;  </span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);  </span><br><span class="line">    reverse_string(arr, k);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, arr);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>考查字符串和字符数组的相关操作，注意在没有明确指定是否允许使用库函数的时候，就默认允许使用库函数，在不允许的情况下需要自定义实现这些函数（本题中只需要自定义实现strlen()、strstr()、strcat()这些函数），这样就很OK了！</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;实现一个函数，可以左旋字符串中的k个字符。 AABCD左旋一个字符得到ABCDA AABCD左旋两个字符得到BCDAA&lt;br&gt;
    
    </summary>
    
      <category term="C语言知识及题集" scheme="https://mr-hunter.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%A2%98%E9%9B%86/"/>
    
    
      <category term="字符串旋转" scheme="https://mr-hunter.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%8B%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>浅析（命令行参数 ）&amp;&amp;（main函数参数）</title>
    <link href="https://mr-hunter.github.io/2018/05/20/201852222-2/"/>
    <id>https://mr-hunter.github.io/2018/05/20/201852222-2/</id>
    <published>2018-05-20T05:27:47.000Z</published>
    <updated>2018-05-23T05:19:00.192Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数:"></a>命令行参数:</h2><blockquote><p>● 命令行参数是控制命令执行的一种方式。  </p><p>● 命令行参数类似于函数的参数，只是命令行参数是传送给命令的。命令执行时，内核已经将命令行参数放入命令的栈中，命令执行时则可以获取命令行参数，解析，执行。</p><p>● 命令行参数使命令可以执行不同任务。<br><a id="more"></a></p></blockquote><h2 id="linux系统下的实现"><a href="#linux系统下的实现" class="headerlink" title="linux系统下的实现:"></a>linux系统下的实现:</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;    </span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span>    </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,argc);    </span><br><span class="line"></span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,argv[<span class="number">0</span>]);    </span><br><span class="line"></span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,argv[<span class="number">1</span>]);    </span><br><span class="line"></span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,argv[<span class="number">2</span>]);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们给main函数传递两个参数：argc，argv：</p><blockquote><p>● argc是int类型的，它表示的是命令行参数的个数。不许要用户传递，它会根据用户从命令行输入的参数个数，自动确定。</p><p>● argv是char* argv[]类型的，即是指针数组类型，它的作用是存储用户从命令行传递进来的参数。它的第一个成员是程序执行的.exe文件。</p><p>● main函数还有一个参数是envp，是一个 指针数组类型，每个元素存储指向一个环境变量的字符指针。这里不予赘述。</p></blockquote><p>对于上面的例子，我们将其保存为test.c，用gcc编译生成目标文件为a.out</p><p><strong>编译结果如下</strong>：</p><p><img src="/img/2018522.png" alt="图片加载中"><br><strong>执行结果如下</strong>：</p><p><img src="/img/20185221.png" alt="图片加载中"></p><p>这里第一个输出的是argc，因为我们只输入了./a.out，所以argc为1，即只有一个命令行参数。后面输出的第一个命令行参数也是./a.out。接着程序就出错了，因为程序要说输出第二、第三参数，而后面已经没有第二个和第三个参数了，在写实际的应用时，应注意对这一部分进行容错处理。所谓容错处理就是指软件运行时，能对由非正常因素引起的运行错误给出适当的处理或信息提示，使软件运行正常结束。而这个错误也就是程序员很容易犯得<a href="https://blog.csdn.net/sunshine_okey/article/details/7367332" target="_blank" rel="noopener">段错误</a>。</p><blockquote><p>当在命令行输入./a.out、linux、nihao三个参数时，执行结果如图：</p></blockquote><p><img src="/img/20185222.png" alt="图片加载中"><br>命令行参数个数为3，第一个参数./a.out、第二个参数linux、第三个参数nihao。</p><blockquote><p>当输入./a.out、”linux nihao”、hehe、”hi apple”四个参数时，执行结果如图：</p></blockquote><p><img src="/img/20185223.png" alt="图片加载中"><br>当输入四个参数，命令行参数个数就为4，但需要注意的是就是如果一个参数之间有空格，需要用双引号引起来，以免产生不必要的错误。</p><p><strong>当然对于具体情况请看下图</strong>：</p><p><img src="/img/20185224.png" alt="图片加载中">  </p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><blockquote><p>对于main函数第二个参数argv，其数据类型可以写成三种形式：<br>char *argv[]、char **argv、char argv[][]，当然第三个函数参数envp同理。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;命令行参数&quot;&gt;&lt;a href=&quot;#命令行参数&quot; class=&quot;headerlink&quot; title=&quot;命令行参数:&quot;&gt;&lt;/a&gt;命令行参数:&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;● 命令行参数是控制命令执行的一种方式。  &lt;/p&gt;
&lt;p&gt;● 命令行参数类似于函数的参数，只是命令行参数是传送给命令的。命令执行时，内核已经将命令行参数放入命令的栈中，命令执行时则可以获取命令行参数，解析，执行。&lt;/p&gt;
&lt;p&gt;● 命令行参数使命令可以执行不同任务。&lt;br&gt;
    
    </summary>
    
      <category term="C语言知识及题集" scheme="https://mr-hunter.github.io/categories/C%E8%AF%AD%E8%A8%80%E7%9F%A5%E8%AF%86%E5%8F%8A%E9%A2%98%E9%9B%86/"/>
    
    
      <category term="命令行参数 main函数" scheme="https://mr-hunter.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0-main%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>My First Blog</title>
    <link href="https://mr-hunter.github.io/2018/05/20/My-First-Blog/"/>
    <id>https://mr-hunter.github.io/2018/05/20/My-First-Blog/</id>
    <published>2018-05-20T05:27:47.000Z</published>
    <updated>2018-05-22T09:37:25.439Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>人生，走着走着便懂了，对于未来，不再迷茫彷徨，而是以更坚定的步伐迈向预定的目标；人生，走着走着便懂了，对于爱情，不再痴迷悲伤，而是以更理智的心态去接受爱情细水长流的平淡；人生，走着走着便懂了，对于生活，不再困惑感伤，而是以积极乐观的心态去迎接每一个黎明的到来。<br><a id="more"></a></p></blockquote><p><img src="/img/587000.jpg" alt="图片加载中"></p><blockquote><p>白驹过隙，转眼间，我已是大二学生，虽然已经在大学生活了一年，却依然对未来很迷茫，这种迷茫也带来了一系列的恐惧：能否找到称心如意的工作、能否有能力赡养自己的父母，买不起房怎么办、程序员真的是青春饭吗……<br>我是通信学院物联网工程专业的一名普通的不能再普通的学生。说实话，上大学以来，我并没有为了某些事情真正地努力过，即使是一些很简单的事情 。</p></blockquote><blockquote><p>曾听人说大学有四个阶段：不知道自己不知道-&gt;知道自己不知道-&gt;不知道自己知道-&gt;知道自己知道。就目前情况来看我应该处于第二阶段，我认识到自己缺乏太多的专业知识以及社交原则，我也会经常阅读搞IT的成功人士的案例来寻求安慰与激励，但这只是短暂的麻痹罢了。</p></blockquote><blockquote><p>曾经很“牛逼”地对好朋友说过：“我不想过一辈子穷苦生活！”现在想起当时的自己真的是既无知又可笑，我特么拿什么去过理想中的生活呢？殊不知：开水不响，响水不开。被打的人才会大吼几声来搏回一点颜面，而真正有实力的人都是深藏不露的。</p></blockquote><blockquote><p>小时候家里还种地的时候，我也像其他孩子一样要去田里除草。烈日炎炎下，站在田地里往前一看，我的妈，还有这么多的草要拔呀！还没干活便没了一半的力气。而如果一步一步的做好眼前的这一块，便在不知不觉中就到了地头。我现在何尝又不是当年那个拔草的少年呢，我还有海量的东西要学，我为何不能脚踏实地的学好现在的东西呢？</p></blockquote><blockquote><p>现于公元二零一八年，特写此篇 ，抒己所感。我并不是为自己起初愚笨忏悔，而是把压在心里的东西排出来轻松一下，并且要警示自己从现在起，静下心来，虚心学习，因为仅剩的大学时光不多了。说实话，像我这样无实力的人连现在的生活都掌控不好，有何权利去畅想未来？关键是要把自己变强大，才能在困难面前有获胜的筹码。曾听过一句自认为非常好的话，毅然当作了自己的座右铭：人生在勤，不索何获！</p></blockquote><p><strong>作此篇亦献给正处于迷茫中的你，希望能够共勉，一起进步!</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;人生，走着走着便懂了，对于未来，不再迷茫彷徨，而是以更坚定的步伐迈向预定的目标；人生，走着走着便懂了，对于爱情，不再痴迷悲伤，而是以更理智的心态去接受爱情细水长流的平淡；人生，走着走着便懂了，对于生活，不再困惑感伤，而是以积极乐观的心态去迎接每一个黎明的到来。&lt;br&gt;
    
    </summary>
    
      <category term="程序人生" scheme="https://mr-hunter.github.io/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="人生在勤，不索何获" scheme="https://mr-hunter.github.io/tags/%E4%BA%BA%E7%94%9F%E5%9C%A8%E5%8B%A4%EF%BC%8C%E4%B8%8D%E7%B4%A2%E4%BD%95%E8%8E%B7/"/>
    
  </entry>
  
</feed>
